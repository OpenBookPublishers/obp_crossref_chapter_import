#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Find missing chapters and/or chapter identifiers in Crossref and
submit new findings to the identifier translation service.  If
`dry_run' is set to True, then don't actually submit any data to
the API.

usage: python run

(c) Javier Arias, Open Book Publishers, October 2018
Use of this software is governed by the terms of the MIT license

Dependencies:
  httplib2==0.10.3
  urllib3==1.20
"""

import os
import sys
import json
import httplib2

dry_run       = False

def get_config():
    keys = [
        "USER_AGENT",
        "CROSSREF_ROWS",
        "URI_API_ENDP",
        "URI_API_USER",
        "URI_API_PASS",
        "AUTH_API_ENDP",
        "URI_API_WORKS",
        "URI_API_URIS",
        "URI_API_REL"
    ]
    config = type('Config', (), {})() # creates anonymous object
    for key in keys:
        setattr(config, key, os.environ[key])

    api_jwtoken = get_token(config.AUTH_API_ENDP,
                            config.URI_API_USER,
                            config.URI_API_PASS)
    config.auth = 'Bearer ' + api_jwtoken

    return config


def get_token(url, email, passwd):
    h = httplib2.Http()
    credentials = {'email': email, 'password': passwd}
    headers = {'content-type': 'application/json'}
    res, content = h.request(url, 'POST', json.dumps(credentials), headers)
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)
    return json.loads(content.decode('utf-8'))['data'][0]['token']


def get_all_books(config):
    url = (config.URI_API_WORKS + '?filter=work_type:monograph,work_type:book,work_'
           + 'type:edited-book,work_type:journal-issue,uri_scheme:urn:isbn')
    return request_identifiers(url, config.auth)


def get_work(uuid, auth, config):
    url = config.URI_API_WORKS + '?UUID=' + uuid
    return request_identifiers(url, auth)[0]


def get_chapters(serialised_isbns, config):
    url = ("https://api.crossref.org/works?filter=type:book-chapter,"
           + "type:book-part,type:book-section,type:component,"
           + serialised_isbns + "&select=title,DOI,ISBN,type,URL,link&rows="
           + config.CROSSREF_ROWS)
    h = httplib2.Http()
    res, content = h.request(url, 'GET', headers={'User-Agent':
                                                  config.USER_AGENT})
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)

    return json.loads(content.decode('utf-8'))['message']['items']


def get_from_doi(doi, auth, config):
    url = config.URI_API_ENDP + "?uri=" + doi
    return request_identifiers(url, auth)


def submit(url, data, auth):
    h = httplib2.Http()
    headers = {'content-type': 'application/json',
               'Authorization': auth}
    body = json.dumps(data)
    if dry_run:
        return
    res, content = h.request(url, 'POST', body, headers)
    try:
        assert res.status == 200
    except AssertionError:
        sys.stderr.write(content)


def request_identifiers(url, auth):
    h = httplib2.Http()
    res, content = h.request(url, 'GET', headers={'Authorization': auth})
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)

    return json.loads(content.decode('utf-8'))['data']


def get_uuid_from_uris(uris):
    uuid = ''
    for uri in uris:
        assert uuid == '' or uuid == uri['work']['UUID']
        uuid = uri['work']['UUID']
    return uuid


def get_uri_from_uris(uri, uris):
    for e in uris:
        if e['URI'] == uri:
            return e['URI']
    return ''


def get_isbns_from_uris(uris):
    isbns = []
    for uri in uris:
        if uri['URI_parts']['scheme'] == 'urn:isbn':
            isbns.append(uri['URI_parts']['value'])
    return isbns


def standarise_uri(uri, canonical="false"):
    return {'URI': uri, 'canonical': canonical}


def standarise_uris(uris):
    return [standarise_uri(e) for e in uris]


def serialise_isbn(isbn):
    return 'isbn:' + isbn + ','


def process_works(works, config):
    auth = config.auth
    for work in works:
        try:
            uuid = work['UUID']
            work_isbns = get_isbns_from_uris(work['URI'])
            serialised_isbns = ''.join([serialise_isbn(i) for i in work_isbns])
            assert uuid and serialised_isbns
        except AssertionError:
            sys.stderr.write("Malformed record:\n")
            sys.stderr.write(work)
            sys.exit(1)

        try:
            chapters = get_chapters(serialised_isbns, config)
            assert chapters
        except (ValueError, AssertionError):
            msg = "No chapters found for: %s (%s)\n"
            sys.stderr.write(msg % (work['title'][0], uuid))
            continue

        # get children
        work_record = get_work(uuid, auth, config)
        children = work_record['child']

        for chapter in chapters:
            isbns = ["urn:isbn:" + i for i in chapter['ISBN']]
            parent_isbns = ["urn:isbn:" + i for i in work_isbns]
            doi = "info:doi:" + chapter['DOI']
            input_uris = standarise_uris(isbns)
            input_uris.append(standarise_uri(doi, "true"))
            input_uris.append(standarise_uri(chapter['URL']))
            input_uris = input_uris + standarise_uris(parent_isbns)

            # Text-mining and similarity-checking URLs may be found in 'link'
            try:
                for l in chapter['link']:
                    input_uris.append(standarise_uri(l['URL']))
            except KeyError:
                pass

            try:
                uris = get_from_doi(doi, auth, config)
                chap_uuid = get_uuid_from_uris(uris)
                assert uris and uuid
            except (ValueError, AssertionError):
                # add new work
                title  = chapter['title']
                wtype  = chapter['type']
                parent = uuid
                work = {'title': title, 'type': wtype, 'URI': input_uris,
                        'parent': parent}
                submit(config.URI_API_WORKS, work, auth)
                continue

            # insert input URIs if not already in database
            for uri in input_uris:
                candidate = get_uri_from_uris(uri['URI'], uris)
                try:
                    assert candidate == ''
                except AssertionError:
                    continue
                new_uri = {'UUID': chap_uuid, 'URI': uri['URI']}
                submit(config.URI_API_URIS, new_uri, auth)
            # add work_relation if not present
            try:
                assert chap_uuid in children
            except AssertionError:
                relation = {'parent_UUID': uuid, 'child_UUID': chap_uuid}
                submit(config.URI_API_REL, relation, auth)
                continue


def run():
    config = get_config()
    all_works = get_all_books(config)
    assert all_works
    process_works(all_works, config)


if __name__ == '__main__':
    run()
